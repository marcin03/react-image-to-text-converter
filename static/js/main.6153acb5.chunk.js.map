{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pictures","pictureDataURLs","progress","inProgress","progressStatus","recognizedTexts","onDrop","bind","assertThisInitialized","pictureFiles","setState","console","log","prevProps","prevState","_this2","length","Tesseract","recognize","Math","round","status","then","res","recognizedText","catch","error","speech","Speech","init","volume","lang","rate","pitch","splitSentences","listeners","onvoiceschanged","voices","speak","text","queue","e","_this3","react_default","a","createElement","className","style","width","height","src","logo","alt","compiled_default","withIcon","buttonText","onChange","imgExtension","maxFileSize","onClick","play","dangerouslySetInnerHTML","__html","html","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6153acb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\n//import myImage from './foo.jpg';\nimport './App.css';\nimport {Tesseract} from \"tesseract.ts\";\nimport ImageUploader from 'react-images-upload';\nimport Speech from 'speak-tts'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictures: [],\n            pictureDataURLs: [],\n            progress: 0,\n            inProgress: false,\n            progressStatus: \"waiting for image\",\n            recognizedTexts:[]\n        };\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            //pictures: this.state.pictures.concat(pictureFiles),\n            pictureDataURLs: pictureDataURLs ? pictureDataURLs : []\n        })\n        //console.log(\"uploaded: \", this.state.pictures)\n        //console.log(\"pictureFiles: \", pictureFiles);\n        //console.log(\"pictureDataURLs: \", pictureDataURLs);\n    }\n\n    componentDidMount() {\n        console.log(\"App componentDidMount\")\n        //Tesseract\n        //    .recognize(myImage)\n        //    .progress(console.log)\n        //    .then((res) => {\n        //        console.log(res);\n        //    })\n        //    .catch(console.error);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n       // console.log('this.state.pictureDataURLs:', this.state.pictureDataURLs)\n\n        if (this.state.pictureDataURLs !== prevState.pictureDataURLs) {\n            if (this.state.pictureDataURLs.length > prevState.pictureDataURLs.length) {\n                Tesseract\n                    .recognize(this.state.pictureDataURLs[this.state.pictureDataURLs.length - 1])\n                    .progress((progress)=>{\n                    console.log(progress)\n                        this.setState({\n                         progress:Math.round(progress.progress * 100) / 100,\n\n                         inProgress: progress.progress===1?false:true,\n                         progressStatus: progress.progress===1?\"waiting for next image\":progress.status\n                        })\n                    })\n                    .then((res) => {\n                        console.log(res);\n                        this.setState({\n                            recognizedText:res\n                        })\n                    }).catch(console.error)\n            }\n        }\n\n    }\n    play(){\n        console.log(\"start reading\")\n        const speech = new Speech()\n        speech.init({\n            'volume': 1,\n            //'lang': 'en-GB',\n            'lang': 'pl-PL',\n            'rate': 1,\n            'pitch': 1,\n            //'voice':'Google UK English Male',\n            'splitSentences': true,\n            'listeners': {\n                'onvoiceschanged': (voices) => {\n                    console.log(\"Event voiceschanged\", voices)\n                }\n            }\n        })\n        speech.speak({\n            text: this.state.recognizedText.text,\n            queue: false\n        }).then(() => {\n            console.log(\"Success !\")\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img style={{width:\"60px\", height:\"60px\"}} src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>\n                        {this.state.progressStatus}\n                    </p>\n                    <ImageUploader\n                        withIcon={true}\n                        //withPreview={true}\n                        buttonText='Choose images'\n                        onChange={this.onDrop}\n                        imgExtension={['.jpg', '.png']}\n                        maxFileSize={5242880}\n                        //singleImage={true}\n                    />\n\n                    <p>\n                        progress: {this.state.progress*100}%\n                    </p>\n                    <h3>Recognized text:</h3>\n                    {this.state.recognizedText&&<button onClick={()=>this.play()}>read me text</button>}\n                    <div>\n\n                        {this.state.recognizedText?this.state.recognizedText.text:\"\"}\n                    </div>\n                    <h3>Formatted text:</h3>\n                    <div dangerouslySetInnerHTML={{__html: this.state.recognizedText?this.state.recognizedText.html:\"\"}} />\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}